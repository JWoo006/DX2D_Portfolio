//
// 게임 3d 수학
// 월드변환, 뷰변환, 프로젝션 변환
//
// 3차원 좌표계 x,y,z
// 왼손 좌표계, 오른손 좌표계 방향에따라 z값이 양수 음수구분짓
// ㄴ 엔진마다 차이점이 있음 유니티(왼손 좌표계) 언리얼 (왼손 좌표계에서 y축이 z, z축이 y
// 
// 정보를 담고있는 좌표계에 회전행렬 진행
// 크기 회전 이동을 처리하기위해 행렬에 x,y,z의 3차원에서 더 추가해서
// 4개의 행렬를 넣어서 행렬 곱셈연산을 처리한다
// 크기 * 회전 * 이동 행렬 = 월드 행렬
// 
// 오일러 각 회전
// ㄴ 단점 아폴로 11호에서 문제가 생김 -> 짐벌락 현상 
// ㄴ 어느 순간 x,y,z 축들이 겹쳐서 회전이 제대로 이루어지지 않게됨
// 
// 월드공간의 좌표를 카메라 공간 or 뷰공간으로 변환이 필요함
// https://blog.naver.com/destiny9720/221423054915
// 
// 월드 행렬 구조 구현
// ㄴ 셰이더 코드에서 트랜스폼 포지션을 열중심 행렬 월드, 뷰 행렬, 프로젝션 행렬 추가
// ㄴ 렌더러 클래스 상수버퍼 사이즈 변경 matrixcb 디파인 자동화
// ㄴ 그래픽스 헤더에 CBUFFER 정의로 자동화 alignas(16) -> 16바이트로 단위로 생성
// ㄴ 트랜스폼 컴포넌트에 월드 행렬과 방향(x,y,z)을 할수있는 변수 추가
// ㄴ 크기 회전 이동 순서를 지켜야함 (공전주의)
//  Matrix::Identity; // 단위 행렬
// position.Translation(mPosition); 행렬 왼쪽 아래 3개 이동부
// ㄴ 월드행렬에 크기 회전 이동 곱 대입
// ㄴ 업벡터, 포워드 벡터, 라이트 벡터도 회전 갱신
// ㄴ 상수 버퍼에 넘겨주기(바인드
//
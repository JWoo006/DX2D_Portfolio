//
// 마테리얼, 텍스쳐 클래스 클리어 함수 추가
// ㄴ 텍스쳐 클래스 클리어 - nullptr로 세팅
// 
// 카메라 투영 행렬 종류 유니티엔진
// ㄴ perspective 3d월드 원근 뷰 적용
// ㄴ othographic 2d 멀리있든 가까이 있든 똑같이 보임
// 카메라 클래스 구현
// ㄴ 투영행렬 종류 enum으로 추가
// ㄴ 변수에 접근할수있는 함수 추가
// ㄴ 카메라 Near, Far, Size, AspectRatio값 - 카메라 시점의 크기(앞,뒤)를 조절
// ㄴ 카메라가 이동을 할때마다 갱신 - LateUpdate()에 뷰, 프로젝션 행렬 함수 호출
//  뷰 행렬 구현
// ㄴ 뷰이동행렬 생성 - 이동 -pos넣기(카메라는 반대로 이동
// ㄴ 뷰회전행렬 생성 - 삼각함수로 회전 혹은 기저벡터로 회전
// ㄴ viewRotate._11 = right.x; -> _11(행렬의 1행 1열의 인덱스
//  프로젝션 행렬 구현
// ㄴ 화면영역을 먼저 가져오기
// ㄴ 윈도우 핸들 가져온 후 화면 크기 구해서 저장
// ㄴ 종횡비 = 가로 / 세로;
// ㄴ eProjectionType 타입에 따라 구현
// ㄴ Matrix::CreateOrthographicLH - 가로 세로 near far 구해서 추가
// ㄴ 추가하기전에 종횡비율을 가로 세로에 적용하고 추가하기
// ㄴ CreatePerspectiveFieldOfViewLH - 시야각(FOV)이필요 , 종횡비, near, far 추가
// ㄴ XM_2PI -> 360도 에서 6.0f나눠서 60도의 라디안 시야각넣기
//
// 트랜스폼 클래스에 카메라 추가하고 상수 버퍼에 뷰와 프로젝션 get함수 호출하기
// 셰이더 코드에 뷰 프로젝션 적용 
// 
// 플레이 씬에 카메라 오브젝트 추가
// 단축키 ctrl + T ㅁGo to All
//
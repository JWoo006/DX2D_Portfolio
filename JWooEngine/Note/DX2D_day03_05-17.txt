숙제
포트폴리오 게임 3개 정하기

3d 모델
ㄴ 인덱스, 버퍼 텍스쳐

다렉 x 좌표계
ㄴ 가운데 0,0,0(x,y,z)
ㄴ 다렉x의 z좌표계가 안쪽으로 가면 +, open gl은 -
ㄴ 3차원 데이터 모델링을 모니터 2차원으로 옮기는 작업을 렌더링이라함

렌더링 파이프라인 or 그래픽스 렌더링 파이프라인아라 부르는 과정은
3차원으로 만들어진 3D 모델 데이터들을 2차원(모니터)에 투영하는 과정의 프로세스를 자세하게 표현한 것이다.
ㄴ xyz 정4면체 { (-1,1,0) -> (-1, 1 , 0) (-1,1,1) -> (-1.3, 1.3, 0)

렌더링 파이프라인의 순차 4단계
1. 정점 데이터 처리 단계
2. 레스터라이즈 단계
3. 픽셀 단계 or 프래그먼트(fragment) 단계
4. 출력 or 병합 단계
https://learn.microsoft.com/en-us/windows/win32/direct3d11/overviews-direct3d-11-graphics-pipeline
5. 모든 오브젝트 텍스쳐들이 병합된 최종 텍스쳐는 화면 크기만큼 사이즈 조정 <- 렌더 타겟(direct x), 프레임 버퍼(open gl, vulkan)

input Assembler 정점 버퍼
ㄴ 버텍스 데이터 -> 하드디스크 -> 램 -> 그래픽 카드 메모리
ㄴ 우선 모델정보를 GPU에 전달하는 과정
ㄴ 모델은 점의 집합(폴리곤)이다. 주로 삼각형을 가지고 3D물체를 정의한다

vertex buffer 버텍스 버퍼 - 램에 있는 버텍스 데이터를 그래픽 카드 메모리에 할당
ㄴ 정점들을 운반하는 자료구조를 vertex buffer 라고함


인덱스 버퍼 - 그리는 순서(인덱스)를 저장하는 버퍼
ㄴ 사각형을 그리는 데 필요한 정점은 2*3 =6개인데 실제로 사각형을 구성하는 4개의 정점만 있으면 된다
ㄴ 6개의 구성에서 2개의 정점이 중복되어 메모리 낭비가 발생할수 있다. (버텍스가 많을수록 메모리 증가)

정점이 가지는 데이터는 위치, 컬러, 월드 좌표, UV, 빛 계산등 추가할수 있으므로 인덱스 버퍼(위치 데이터만 존재)로 메모리 효율 증가

triangle list - 외에도 여러 모양의 버텍스 리스트 존재

정점 버퍼

로컬 좌표(오브젝트 중심), 월드 좌표
ㄴ 로컬 좌표를 월드 좌표로 옮겨주는 작업 중심을 바꿔는 공간변환이 필요하다
ㄴ Vertex Shader라고 함

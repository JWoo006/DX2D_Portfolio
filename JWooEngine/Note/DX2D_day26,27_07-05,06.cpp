//
// 그리드
// ㄴ 그리드 셰이더 코드파일추가 (PS,VS)
// ㄴ 글로벌 헤더 hlsl에 그리드 상수버퍼 추가(카메파 포지션, 크기, 해상도)
// ㄴ 컬링되지않고(1.0f) 가장 뒤에 그리드가 그려줘야 하므로 0.999f로 pos설정
// ㄴ 렌더러 클래스에 그리드 셰이더 정보 추가 상수버퍼 셰이더
// ㄴ 그리드 마테리얼 추가 후 씬에서 그리드 오브젝트 추가
// ㄴ 그리드 스크립트 클래스 추가(컨텐츠)
// ㄴ 카메라 정보(크기, 스케일), 윈도우 해상도 상수버퍼 넘기기
// 
// 마우스 좌표계(윈도우 좌표계)를 기반한 툴 작업, 마우스 포인터들을 
// 월드에 오브젝트에 생성하는 월드좌표계변환 
// ㄴ 로컬 -> 월드 -> 뷰 -> 프로젝션 행렬 -> 클립 -> NDC -> 뷰포트 -> 윈도우 좌표계
// ㄴ 로컬 좌표계에서 월드 좌표계 변환은 로컬 좌표계에 월드 행렬을 곱
// ㄴ 반대는 월드 행렬에 역행렬을 곱하면 로컬 좌표계
// ㄴ Viewport viewport.Unproject((pos <- 윈도우 좌표계) 
// , Camera::GetProjectionMatrix(), Camera::GetViewMatrix(), Matrix::Identiy)
// ㄴ viewport unproject 함수를 사용해서 월드좌표계로 변환 가능하다
// ㄴ 3d ray rect 충돌
// ㄴ ㄴ 충돌체 체크를 위해 xy값은 같고 z축만 다른 두 정점(ray-레이저)
// ㄴ ㄴ 에 체크되게금 구현
// 
// 렌더러 클래스 구조 조정
// ㄴ LoadMesh함수 - 사각형 정점 정보
// ㄴ LoadMaterial함수 - 마테리얼 로드 함수
// 
//  
// 글로벌 hlsli 헤더파일 추가
// ㄴ 공통적으로 사용하는것들 이동
// ㄴ 트랜스폼, 그리드, 텍스쳐 샘플러 레지스터등등 이동 후 셰이더 파일에 참조 추가
// 
// 오브젝트 인스턴스화
// ㄴ 게임 오브젝트 상태에 구분해서 렌더할지 안할지 분류
// ㄴ dead, active
// ㄴ layer 클래스에서 dead상태 오브젝트를 모아서 제외시킨후 제거
// ㄴ 오브젝트 인스턴스화
// ㄴ 템플릿으로 해당 타입의 오브젝트를 생성하며 레이어 타입, 트랜스폼, 크기 회전들을 설정
// 
//
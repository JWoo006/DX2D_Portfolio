//
// Animator Animation
// 애니메이터 - 애니메이션들을 관리하고 조작하는 클래스
// 
// 아틀라스 이미지 Atlas
// 
// 애니메이션
// ㄴ 스프라이트 구조체 - 스프라이트 정보(위치 사이즈 길이 등등)
// ㄴ offset - 기준점 발밑 기준으로 정보 처리
// ㄴ 시작 좌표와 사이즈를 VS에 넘기고 PS에서 받은 UV좌표로 그려준다
// ㄴ 그러기 위해 애니메이션 상수 버퍼를 생성하고 바인딩
// ㄴ enum, graphics에 각각 animation 추가( 열거체, 상수 레지스터
// ㄴ LateUpdate 애니메이션 컴플리트 작업 추가
// ㄴ 상수 버퍼에 텍스쳐를 보내줘야하고 어디를 그려줘야하는 정보를 보내줘야함
// ㄴ 그려지는 좌표 중요 - 비율좌표계
// ㄴ 리소스를 관리하는 방식에서 애니메이터에서 리소스 데이터를 받아서 복사해서 여러개의 오브젝트가
// ㄴ 호출되지안게끔 구현
// 
// 애니메이터
// ㄴ 애니메이션 변수, 이벤트 추가
// ㄴ 이벤트 - startevent, completeevent, endevent
// ㄴ 함수 포인터 - 동작을 묶어서 실행하게끔 구현하기위해 사용
// ㄴ std::function<void()> mEvent;
// 
// 렌더러 클래스
// ㄴ 상수버퍼 넘기기
// ㄴ 상수버퍼 슬롯 정하고 spriteLeftTop, spriteSize, spriteOffset, atlasSize;
// 
// FSM 
// ㄴ 유한기계상태
// ㄴ 한 함수안에 모든 로직을 넣지말고
// ㄴ 동작 별로 함수화 idle(), move(), attack(), death()
// ㄴ 게임 개발에서 FSM은 유한 개의 상태를 가지고 주어지는 입력에 따라
// ㄴ 특정의 상태에서 다른 상태로 전이 되거나 또다른 출력 같은 것들이 이루어지도록
// ㄴ 분류하는 것을 FSM이라 한다
// ㄴ 위에 너무 복잡해지면 행동트리를 사용
// 
//
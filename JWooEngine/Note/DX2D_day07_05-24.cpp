//
// nvidia physicsX
// ㄴ 물리 구현해놓은 깃 라이브러리
// ㄴ 물리를 몰라도 사용가능
// 
// gpu 메모리 - 렌더 타겟, 렌더 타겟 뷰, 컨텍스트, 디바이스
// ram - 위를 메모리를 가리키는 포인터 메모리
// 
// 그래픽 디바이스 dx11클래스 정리
// 1. 그래픽 디바이스, 컨텍스트 생성
// 2. 화면에 렌더링 할 수 있게 도와주는 스왑체인 생성
// 3. 렌터 타겟, 렌더 타겟 뷰 생성
// 4. 깊이 버퍼, 깊이 버퍼 뷰 생성
// 4.5. 렌더 타겟 클리어(화면 지우기)
// 5. present 함수로 렌더 타겟에 있는 텍스쳐를 모니터에 그려준다.
// 
// 삼각형 그리기
// ㄴ ndc 좌표에 의거해서 점 세게 만들기
// 
// 어플리케이션 구성
// ㄴ 인풋, 타임 헤더 추가
// ㄴ 렌더러(graphics) 클래스 생성 및 추가
// ㄴ 초기화, 업데이트 구성
//
// 그래픽디바이스클래스 전역화
// ㄴ 자주쓰기위해
//  
// 렌더러 클래스
// ㄴ 엔진, 그래픽디바이스dx11 헤더 추가
// ㄴ 버텍스(정점) 정보를 저장할 구조체 추가
// ㄴ 위치, 색, 등등 구조체에 추가
// ㄴ 현재 클래스에 있는 정보를 gpu에 전달하기 위해 버텍스 버퍼 자료구조를 사용
// 
// ㄴ gpu 정점 버퍼에 들어온 버텍스 정보는 변환해주어야 한다 - 버텍스 셰이더
// ㄴ blob - shader source 추가 -> 새항목추가 -> HLSL-> 꼭짓점 셰이더 파일 추가
// ㄴ 가진 정점 정보 구조체타입에 맞춰 셰이더 소스 코드 작성
// ㄴ cimentic 
// ㄴ 변수들 전역화 후 정점 위치, 컬러 정보 생성 초기화
// ㄴ  SetupState() 정점 버퍼에 넘겨주기전 정점의 데이터 크기 및 정보를 저장해주는 과정의 함수
// ㄴ desc형태로 초기화 및 대입  정점의 크기(색, 위치를 포함한 전체 배열의 크기), BindFlags,
// ㄴ 버퍼 생성 함수 추가 (그래픽 디바이스 클래스)
// ㄴ 추가한 버퍼 함수 호출(인자1, desc, 주소) 
// ㄴ 어플리케이션에서 렌더러 초기화 호출 - 버텍스 버퍼 할당완
// 
// ㄴ 버텍스 셰이더 생성 - 그래픽 디바이스클래스에서 createshader()함수 생성 및 구현
// ㄴ 수동으로 컴파일해서 이진 파일로 gpu에 넘겨줄 필요가 있음
// ㄴ 파일경로시스템으로 다른 공유 항목프로젝트로 접근해야함
// ㄴ 셰이더 소스 공유 항목프로젝트로 접근해서 안의 셰이더 소스 코드를 blob에 전달
// ㄴ 컴파일 성공 시 버텍스 셰이더를 만들어줌
// 
//
//